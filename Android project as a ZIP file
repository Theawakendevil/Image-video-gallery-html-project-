import zipfile
import os

# Define the project file structure
project_files = {
    "AndroidManifest.xml": """<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.xplorestylefilemanager">
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE"/>
    <application
        android:allowBackup="true"
        android:label="Xplore File Manager"
        android:theme="@style/Theme.Material3.DayNight.NoActionBar">
        <activity android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>""",

    "java/com/example/xplorestylefilemanager/MainActivity.java": """package com.example.xplorestylefilemanager;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class MainActivity extends AppCompatActivity {
    private static final int PERMISSION_REQUEST_CODE = 101;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        checkStoragePermissions();
    }
    private void checkStoragePermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
            ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE},
                PERMISSION_REQUEST_CODE);
        } else {
            loadFileFragments();
        }
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                loadFileFragments();
            } else {
                Toast.makeText(this, "Storage permission is required.", Toast.LENGTH_SHORT).show();
            }
        }
    }
    private void loadFileFragments() {
        getSupportFragmentManager().beginTransaction()
            .replace(R.id.left_pane, FilePaneFragment.newInstance("/storage/emulated/0"))
            .commit();
        getSupportFragmentManager().beginTransaction()
            .replace(R.id.right_pane, FilePaneFragment.newInstance("/storage/emulated/0"))
            .commit();
    }
}""",

    "java/com/example/xplorestylefilemanager/FilePaneFragment.java": """package com.example.xplorestylefilemanager;

import android.os.Bundle;
import android.view.DragEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import androidx.fragment.app.Fragment;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FilePaneFragment extends Fragment {
    private static final String ARG_PATH = "arg_path";
    private String currentPath;
    private ListView listView;

    public static FilePaneFragment newInstance(String path) {
        FilePaneFragment fragment = new FilePaneFragment();
        Bundle args = new Bundle();
        args.putString(ARG_PATH, path);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_file_pane, container, false);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        listView = view.findViewById(R.id.file_list_view);
        if (getArguments() != null) {
            currentPath = getArguments().getString(ARG_PATH);
            loadFiles(currentPath);
        }

        listView.setOnItemLongClickListener((parent, view1, position, id) -> {
            View.DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(view1);
            view1.startDragAndDrop(null, shadowBuilder, listView.getItemAtPosition(position), 0);
            return true;
        });

        listView.setOnDragListener((v, event) -> {
            switch (event.getAction()) {
                case DragEvent.ACTION_DROP:
                    String fileName = (String) event.getLocalState();
                    File src = new File(currentPath, fileName);
                    File dest = new File(currentPath, src.getName());
                    FileUtils.copyFile(src, dest);
                    loadFiles(currentPath);
                    return true;
            }
            return true;
        });
    }

    private void loadFiles(String path) {
        File dir = new File(path);
        File[] files = dir.listFiles();
        List<String> fileNames = new ArrayList<>();
        if (dir.getParent() != null)
            fileNames.add("..");
        if (files != null) {
            Arrays.sort(files);
            for (File f : files) {
                fileNames.add(f.getName() + (f.isDirectory() ? "/" : ""));
            }
        }

        ArrayAdapter<String> adapter = new ArrayAdapter<>(getContext(), android.R.layout.simple_list_item_1, fileNames);
        listView.setAdapter(adapter);
        listView.setOnItemClickListener((AdapterView<?> parent, View view, int position, long id) -> {
            String selected = fileNames.get(position);
            File nextFile = selected.equals("..") ? new File(path).getParentFile() : new File(path, selected);
            if (nextFile != null && nextFile.isDirectory()) {
                currentPath = nextFile.getAbsolutePath();
                loadFiles(currentPath);
            }
        });
    }
}""",

    "java/com/example/xplorestylefilemanager/FileUtils.java": """package com.example.xplorestylefilemanager;

import java.io.*;

public class FileUtils {
    public static boolean copyFile(File src, File dst) {
        try (InputStream in = new FileInputStream(src);
             OutputStream out = new FileOutputStream(dst)) {
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    public static boolean deleteFile(File file) {
        return file != null && file.exists() && file.delete();
    }
}""",

    "res/layout/activity_main.xml": """<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/root_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal">
    <FrameLayout
        android:id="@+id/left_pane"
        android:layout_width="0dp"
        android:layout_weight="1"
        android:layout_height="match_parent"/>
    <FrameLayout
        android:id="@+id/right_pane"
        android:layout_width="0dp"
        android:layout_weight="1"
        android:layout_height="match_parent"/>
</LinearLayout>""",

    "res/layout/fragment_file_pane.xml": """<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <ListView
        android:id="@+id/file_list_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:divider="@android:color/darker_gray"
        android:dividerHeight="0.5dp"/>
</FrameLayout>"""
}

# Create the zip file
zip_path = "/mnt/data/XploreStyleFileManager.zip"
with zipfile.ZipFile(zip_path, 'w') as zipf:
    for path, content in project_files.items():
        zipf.writestr(path, content)

zip_path
